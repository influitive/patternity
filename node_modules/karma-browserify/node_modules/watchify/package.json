{
  "name": "watchify",
  "version": "2.2.1",
  "description": "watch mode for browserify builds",
  "main": "index.js",
  "bin": {
    "watchify": "bin/cmd.js"
  },
  "dependencies": {
    "browserify": "^7.0.0",
    "chokidar": "~0.12.1",
    "through2": "~0.5.1"
  },
  "devDependencies": {
    "brfs": "^1.0.1",
    "mkdirp": "~0.3.5",
    "split": "~0.3.0",
    "tape": "^2.12.3"
  },
  "scripts": {
    "test": "tape test/*.js"
  },
  "repository": {
    "type": "git",
    "url": "git://github.com/substack/watchify.git"
  },
  "homepage": "https://github.com/substack/watchify",
  "keywords": [
    "browserify",
    "browserify-tool",
    "watch",
    "bundle",
    "build",
    "browser"
  ],
  "author": {
    "name": "James Halliday",
    "email": "mail@substack.net",
    "url": "http://substack.net"
  },
  "license": "MIT",
  "readme": "# watchify\n\nwatch mode for browserify builds\n\n[![build status](https://secure.travis-ci.org/substack/watchify.png)](http://travis-ci.org/substack/watchify)\n\nUpdate any source file and your browserify bundle will be recompiled on the\nspot.\n\n# example\n\nUse `watchify` with all the same arguments as `browserify` except that\n`-o` is mandatory:\n\n```\n$ watchify main.js -o static/bundle.js\n```\n\nNow as you update files, `static/bundle.js` will be automatically incrementally rebuilt on\nthe fly.\n\nYou can use `-v` to get more verbose output to show when a file was written and how long the bundling took (in seconds):\n\n```\n$ watchify browser.js -d -o static/bundle.js -v\n610598 bytes written to static/bundle.js  0.23s\n610606 bytes written to static/bundle.js  0.10s\n610597 bytes written to static/bundle.js  0.14s\n610606 bytes written to static/bundle.js  0.08s\n610597 bytes written to static/bundle.js  0.08s\n610597 bytes written to static/bundle.js  0.19s\n```\n\n# usage\n\nAll the bundle options are the same as the browserify command except for `-v`.\n\n# methods\n\n``` js\nvar watchify = require('watchify');\nvar fromArgs = require('watchify/bin/args');\n```\n\n## var w = watchify(b, opts)\n\nWrap a browserify bundle `b` with watchify, returning the wrapped bundle\ninstance as `w`.\n\nWhen creating the browserify instance `b` you MUST set these properties in the\nconstructor:\n\n``` js\nvar b = browserify({ cache: {}, packageCache: {}, fullPaths: true })\n```\n\nYou can also just do:\n\n``` js\nvar b = browserify(watchify.args)\n```\n\n`w` is exactly like a browserify bundle except that caches file contents and\nemits an `'update'` event when a file changes. You should call `w.bundle()`\nafter the `'update'` event fires to generate a new bundle. Calling `w.bundle()`\nextra times past the first time will be much faster due to caching.\n\n## w.close()\n\nClose all the open watch handles.\n\n## var w = fromArgs(args)\n\nCreate a watchify instance `w` from an array of arguments `args`. The required\nconstructor parameters will be set up automatically.\n\n# events\n\n## w.on('update', function (ids) {})\n\nWhen the bundle changes, emit the array of bundle `ids` that changed.\n\n## w.on('bytes', function (bytes) {})\n\nWhen a bundle is generated, this event fires with the number of bytes.\n\n## w.on('time', function (time) {})\n\nWhen a bundle is generated, this event fires with the time it took to create the\nbundle in milliseconds.\n\n## w.on('log', function (msg) {})\n\nThis event fires to with messages of the form:\n\n```\nX bytes written (Y seconds)\n```\n\nwith the number of bytes in the bundle X and the time in seconds Y.\n\n# install\n\nWith [npm](https://npmjs.org) do:\n\n```\n$ npm install -g watchify\n```\n\nto get the watchify command and:\n\n```\n$ npm install watchify\n```\n\nto get just the library.\n\n# license\n\nMIT\n",
  "readmeFilename": "readme.markdown",
  "bugs": {
    "url": "https://github.com/substack/watchify/issues"
  },
  "_id": "watchify@2.2.1",
  "_shasum": "6537b3691e364cbb67eff63e2a42fc4889f05f6e",
  "_resolved": "https://registry.npmjs.org/watchify/-/watchify-2.2.1.tgz",
  "_from": "watchify@>=2.2.1 <2.3.0"
}
