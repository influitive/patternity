<section class="pattern-section">
  <header>
    <h3>icons</h3>
  </header>

  <p>All our icons are provided via a custom font.  This allows the size of the icon to be changed via font-size and the colour to be changed via font color.</p>

  <p>In order to standardize how icons are displayed, use the Icon react component to render an icon</p>

  <div id="icons-container"></div>

  <script type="text/javascript">
    (function() {
      var React = inflComp.React;
      var Icon = inflComp.Icon;

      // Adding icons here will make them render on the page
      var icons = {
        'User': 'user',
        'Bell': 'bell',
        'Search': 'search',
        'Mail': 'mail',
        'Check Mark': 'check',
        'Close (Times)': 'times',
        'Check Circle Hollow': 'check-circle-o',
        'Close (Times) Circle Hollow': 'times-circle-o',
        'Exclamation Circle Hollow': 'exclamation-circle-o',
        'Info Circle Hollow': 'info-circle-o',
        'Question Circle Hollow': 'question-circle-o',
        'Plus': 'plus',
        'Minus': 'minus',
        'Coins': 'coins',
        'Lock': 'lock',
        'Unlock': 'unlock',
        'Asterisk': 'asterisk',
        'Chevron Down': 'chevron-down',
        'Chevron Up': 'chevron-up',
        'Chevron Left': 'chevron-left',
        'Chevron Right': 'chevron-right',
        'Arrow Down': 'arrow-down',
        'Arrow Up': 'arrow-up',
        'Arrow Left': 'arrow-left',
        'Arrow Right': 'arrow-right',
        'Calendar': 'calendar',
        'Speech': 'speech',
        'Heart': 'heart',
        'Star': 'star',
        'Pin': 'pin',
        'Pencil': 'pencil',
        'Trash': 'trash',
        'Opening Quote' : 'quote-open',
        'Closing Quote' : 'quote-close',
        'Opening Quote Fill' : 'quote-fill-open',
        'Closing Quote Fill' : 'quote-fill-close',
        'Clock' : 'clock',
        'List' : 'list',
        'Grid' : 'grid',
        'Globe' : 'globe'
      };

      // The font-sizes to use for demonstration
      var sizes = [ 100, 80, 60, 40, 20 ];

      var CodeBlock = React.createClass({
        render: function() {
          var title = this.props.title;
          var code = this.props.code;
          return React.DOM.div(null ,[
            React.DOM.h5({ className: 'code-title' }, title),
            React.DOM.pre({ className: 'code' },
              React.DOM.code(null, code)
            )
          ]);
        }
      })

      var IconPresenter = React.createClass({
        render: function() {
          var icons = Object.keys(this.props.icons).map(this._buildIcons, this);

          return React.DOM.div(null, icons);
        },

        _buildIcons: function(icon) {
          lowerIcon = this.props.icons[icon];
          var sizedIcons = this.props.sizes.map(function (size) {
            return React.createElement(Icon, { icon: lowerIcon, className: 'size-' + size });
          });
          sizedIcons.push(React.createElement(Icon, { icon: lowerIcon }));

          var reactCode = '<Icon icon="' + lowerIcon + '" />';
          var htmlCode = '<span class="ic ic-'+ lowerIcon + '"></span>';

          // combine all the children elements together
          var iconElements = [];
          iconElements.push(React.DOM.h4(null, icon));
          Array.prototype.push.apply(iconElements, sizedIcons);
          iconElements.push(React.createElement(CodeBlock, {title: 'HTML', code: htmlCode}));
          iconElements.push(React.createElement(CodeBlock, {title: 'React', code: reactCode}));


          return React.DOM.div(null, iconElements);
        },

        _buildCodeBlocks: function(type, code) {
          return [
            React.DOM.h5({ className: 'code-title' }, type),
            React.DOM.pre({ className: 'code' },
              React.DOM.code(null, code)
            )
          ]
        }
      });

      React.render(
        React.createElement(IconPresenter, {icons: icons, sizes: sizes}),
        document.getElementById('icons-container')
      );
    })();
  </script>
</section>
