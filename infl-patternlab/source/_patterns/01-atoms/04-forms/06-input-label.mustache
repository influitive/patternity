 <section class="pattern-section">
  <header>
    <h3>input label</h3>
  </header>

  <p>The Input Label is used to add a label to a variety of inputs including:</p>

  <ul>
    <li>Text Inputs</li>
    <li>Select Dropdowns</li>
    <li>Checkboxes</li>
    <li>Radio Buttons</li>
    <li>Textareas</li>
    <li>ToggleSwitch</li>
  </ul>

  <p>Input Label helps with styling of the inputs and has two layouts inline and stacked</p>

  <h4>Label - Stacked</h4>
  <span id="label-input-stacked-pattern"></span>
  <script type="text/javascript">
    (function() {
      var inputProps = {
        type: "text",
        placeholder : "Text Input",
        name : "text-input",
        message : "Hint: Fill in this field."
      };

      var props = {
        layout : "stacked",
        label : "Field Label",
        children : inflComp.React.createElement(inflComp.TextInput, inputProps)
      };

      inflComp.inputLabel(props, "label-input-stacked-pattern");
    })();
  </script>

  <h5 class="code-title">Code</h5>
  <pre class="code">
    <code>
      &lt;InputLabel layout="stacked" label="Field Label"&gt;
        &lt;TextInput type="text" placeholder="Text Input" message="Hint: Fill in this field." /&gt;
      &lt;/InputLabel&gt;
    </code>
  </pre>

  <h5 class="code-title">Props</h5>
  <pre class="code">
    <code>
      {
        layout : string,        //determines InputLabel layout is either 'stacked' or 'inline'
        label : "Field Label",  //value of the label
        children : [...]        //input can be TextInput, SelectDropdown, ToggleSwitch, checkbox, etc.
      }
    </code>
  </pre>

  <h4>Label - Inline</h4>
  <span id="label-input-inline-pattern"></span>
  <script type="text/javascript">
    (function() {
      var inputProps = {
        type: "text",
        placeholder : "Text Input",
        name : "text-input",
        message : "Hint: Fill in this field."
      };

      var props = {
        layout : "inline",
        label : "Field Label",
        children : [
          inflComp.React.createElement(inflComp.TextInput, inputProps)
        ]
      };

      inflComp.inputLabel(props, "label-input-inline-pattern");
    })();
  </script>

  <h5 class="code-title">Code</h5>
  <pre class="code">
    <code>
      &lt;InputLabel layout="inline" label="Field Label"&gt;
        &lt;TextInput type="text" placeholder="Text Input" message="Hint: Fill in this field." /&gt;
      &lt;/InputLabel&gt;
    </code>
  </pre>

  <h4>Label - Radio Buttons</h4>
  <span id="label-input-inline-radio-button-pattern"></span>
  <script type="text/javascript">
    (function() {
      var inputProps = {
        type: "text",
        placeholder : "Text Input",
        name : "text-input",
        message : "Hint: Fill in this field."
      };

      function createRadioButton(value, isChecked){
        var props = {
          enabled: true,
          isChecked : isChecked,
          radioName: "test-name",
          radioLabel : "My Radio Button",
          value : value,
          id : value
        };
        return inflComp.React.createElement(inflComp.RadioButton, props);
      }

      function createRadioButtonGroup(layout){
        return inflComp.React.createElement(inflComp.RadioButton.Group, {
          radioName : "test-name-two",
          enabled : true,
          layout : layout,
          children : [createRadioButton("value1", true), createRadioButton("value2", false)]
        });
      }

      var props = {
        layout : "inline",
        label : "Field Label",
        children : [
          createRadioButtonGroup("inline")
        ]
      };

      inflComp.inputLabel(props, "label-input-inline-radio-button-pattern");
    })();
  </script>

  <h5 class="code-title">Code</h5>
  <pre class="code">
    <code>
      &lt;InputLabel layout="inline" label="Field Label"&gt;
        &lt;RadioButton.Group enabled={true} radioName="my-radio-name" layout="inline" &gt;
          &lt;RadioButton id="radio-id-1" enabled={true} isChecked={true} radioName="my-radio-name" radioLabel : "My Radio Button" value : "radio-button-1"/&gt;
          &lt;RadioButton id="radio-id-2" enabled={true} isChecked={false} radioName="my-radio-name" radioLabel : "My Radio Button" value : "radio-button-2"/&gt;
        &lt;/RadioButton.Group&gt;
      &lt;/InputLabel&gt;
    </code>
  </pre>
</section>
