<script type="text/javascript">
  function buildTextInput(){
    return inflComp.React.createElement(inflComp.TextInput,{
      name : "text-input",
      placeholder : "Text Input"
    });
  }

  function buildFormLabel(){
    return inflComp.React.createElement(inflComp.InputLabel,{
      label : "Input Label",
      children : buildTextInput()
    });
  }

  function buildFormLabelMultiInput(){
    return inflComp.React.createElement(inflComp.InputLabel,{
      label : "Input Label",
      children : [buildTextInput(), buildTextInput(), buildTextInput()]
    });
  }

  function buildFormRowMultiInput(){
    return inflComp.React.createElement(inflComp.Form.Row,{
      children : buildFormLabelMultiInput()
    });
  }

  function buildFormRow(){
    return inflComp.React.createElement(inflComp.Form.Row,{
      size : "small",
      children : buildFormLabel()
    });
  }

  function buildFormColumn(){
    return inflComp.React.createElement(inflComp.Form.Column,{
      children : [buildFormRow(), buildFormRow(), buildFormRow()]
    });
  }

  function buildFormActions(){
    return inflComp.React.createElement(inflComp.Form.Actions,{
      children : [
        inflComp.React.createElement(inflComp.ButtonGroup, {
          children : [
            inflComp.React.createElement("button", {
              className : "text",
              children: ["Cancel"]
            }),
            inflComp.React.createElement("button", {
              className : "success",
              children: ["Save"]
            })
          ]
        })
      ]
    });
  }

  function buildFormTitle(){
    return inflComp.React.createElement(inflComp.Form.Title,{
      title : "My Form Title",
      actions : inflComp.React.createElement(inflComp.ButtonGroup, {
        children : [
          inflComp.React.createElement("button", {
            className : "secondary",
            children: ["Cancel"]
          }),
          inflComp.React.createElement("button", {
            className : "primary",
            children: ["Save Changes"]
          })
        ]
      }),
      children : ["This is my form title description"]
    });
  }

  function buildFormSectionTitle(){
    return inflComp.React.createElement(inflComp.Form.Section,{
      children : [
        inflComp.React.createElement(inflComp.Form.SectionTitle,{
          title : "My Form Section Title",
          children : ["This is my form section title description"]
        })
      ]
    });
  }


  function buildFormSection(){
    return inflComp.React.createElement(inflComp.Form.Section,{});
  }

  function buildFormAlert(){
    return inflComp.React.createElement(inflComp.Form.Alert,{
      children : [
        inflComp.React.createElement(inflComp.Alert,{
          showIcon : true,
          title : "All fields are required"
        })
      ]
    });
  }
</script>

<section class="pattern-section">
  <header>
    <h3>form</h3>
  </header>

  <p>The form component is used for wrapping form sub components and aids in the styling and layout for forms.</p>

  <h4>Form</h4>

  <p>Form renders a form tag.  So there isn't much to show... sorry</p>

  <h4 class="code-title">Code</h4>

  <h5 class="code-title">JSX</h5>
  <pre class="code">
    <code>
      &lt;Form&gt;
      &lt;/Form&gt;
    </code>
  </pre>

  <h5 class="code-title">Without JSX</h5>
  <pre class="code">
    <code>
      React.render(
        React.createElement(Form, props),
        {DOM element to append form to}
      );
    </code>
  </pre>

  <h4 class="code-title">Props</h4>

  <pre class="code">
    <code>
      {
        acceptCharset : string,    // character encodings that are to be used for the form submission
        action : string,           // url
        autocomplete : string,     // one of 'on', 'off' defaults to empty string
        enctype : string,          // one of 'application/x-www-form-urlencoded', 'multipart/form-data', 'text/plain'. defaults to empty string
        method : string            // one of 'get', 'post'.  defaults to empty string
        name : string,             // name of th form
        novalidate : boolean,      // determines if html 5 validation is on.  defaults to false
        target : string            // one of '_blank', '_self', '_parent', '_top'.  defaults to empty string
      }
    </code>
  </pre>

  <h4>Form - Rows</h4>

  <p>Should be used with Form.  Otherwise there will be no styling</p>

  <div id="form-rows-pattern"></div>
  <script type="text/javascript">
    (function() {
      var props = {
        children : [buildFormRow(), buildFormRow(), buildFormRow(), buildFormRow()]
      };

      inflComp.React.render(
        inflComp.React.createElement(inflComp.Form, props),
        document.getElementById("form-rows-pattern")
      );
    })();
  </script>

  <h4 class="code-title">Code</h4>

  <h5 class="code-title">JSX</h5>
  <pre class="code">
    <code>
      &lt;Form&gt;
        &lt;Form.Row inputSize="large"&gt;
          &lt;InputLabel label="Text Input" &gt;
            &lt;TextInput name="text-input" placeholder="Text Input" /&gt;
          &lt;/InputLabel&gt;
        &lt;/Form.Row&gt;
        .
        .
        .
      &lt;/Form&gt;
    </code>
  </pre>

  <h5 class="code-title">Without JSX</h5>
  <pre class="code">
    <code>
      React.render(
        React.createElement(Form.Row, props),
        {DOM element to append form row to}
      );
    </code>
  </pre>

  <h4 class="code-title">Props</h4>

  <pre class="code">
    <code>
      {
        children : [...]    //form row is best used with input label,
        inputSize : string  //determines how large the input will be small, medium ro large.  defaults to large
      }
    </code>
  </pre>

  <h4>Form - Columns - 2 Columns</h4>

  <p>Should be used with Form.  Otherwise there will be no styling.  Form can handle none, 2 and 3 columns</p>

  <div id="form-column-pattern"></div>
  <script type="text/javascript">
    (function() {
      var props = {
        children : [buildFormColumn(), buildFormColumn()]
      };

      inflComp.React.render(
        inflComp.React.createElement(inflComp.Form, props),
        document.getElementById("form-column-pattern")
      );
    })();
  </script>

  <h4 class="code-title">Code</h4>

  <h5 class="code-title">JSX</h5>
  <pre class="code">
    <code>
      &lt;Form&gt;
        &lt;Form.Column&gt;
          &lt;Form.Row&gt;
            &lt;InputLabel label="Text Input" &gt;
              &lt;TextInput name="text-input" placeholder="Text Input" /&gt;
            &lt;/InputLabel&gt;
          &lt;/Form.Row&gt;
          .
          .
          .
        &lt;/Form.Column&gt;
        &lt;Form.Column&gt;
          &lt;Form.Row&gt;
            &lt;InputLabel label="Text Input" &gt;
              &lt;TextInput name="text-input" placeholder="Text Input" /&gt;
            &lt;/InputLabel&gt;
          &lt;/Form.Row&gt;
          .
          .
          .
        &lt;/Form.Column&gt;
      &lt;/Form&gt;
    </code>
  </pre>

  <h5 class="code-title">Without JSX</h5>
  <pre class="code">
    <code>
      React.render(
        React.createElement(Form.Column, props),
        {DOM element to append form column to}
      );
    </code>
  </pre>

  <h4 class="code-title">Props</h4>

  <pre class="code">
    <code>
      {
        children : [...]  //form row is best used with Form
      }
    </code>
  </pre>

  <h4>Form - Columns - 3 Columns</h4>

  <div id="form-column-3-pattern"></div>
  <script type="text/javascript">
    (function() {
      var props = {
        children : [buildFormColumn(), buildFormColumn(), buildFormColumn(), buildFormRow(), buildFormColumn(), buildFormColumn(), buildFormRowMultiInput(), buildFormActions()]
      };

      inflComp.React.render(
        inflComp.React.createElement(inflComp.Form, props),
        document.getElementById("form-column-3-pattern")
      );
    })();
  </script>

  <h4 class="code-title">Code</h4>

  <h5 class="code-title">JSX</h5>
  <pre class="code">
    <code>
      &lt;Form&gt;
        &lt;Form.Column&gt;
          &lt;Form.Row&gt;
            &lt;InputLabel label="Text Input" &gt;
              &lt;TextInput name="text-input" placeholder="Text Input" /&gt;
            &lt;/InputLabel&gt;
          &lt;/Form.Row&gt;
          &lt;Form.Row&gt;
            &lt;InputLabel label="Text Input" &gt;
              &lt;TextInput name="text-input" placeholder="Text Input" /&gt;
            &lt;/InputLabel&gt;
          &lt;/Form.Row&gt;
          &lt;Form.Row&gt;
            &lt;InputLabel label="Text Input" &gt;
              &lt;TextInput name="text-input" placeholder="Text Input" /&gt;
            &lt;/InputLabel&gt;
          &lt;/Form.Row&gt;
        &lt;/Form.Column&gt;
        &lt;Form.Row&gt;
          &lt;InputLabel label="Text Input" &gt;
            &lt;TextInput name="text-input" placeholder="Text Input" /&gt;
          &lt;/InputLabel&gt;
        &lt;/Form.Row&gt;
        &lt;Form.Column&gt;
          &lt;Form.Row&gt;
            &lt;InputLabel label="Text Input" &gt;
              &lt;TextInput name="text-input" placeholder="Text Input" /&gt;
            &lt;/InputLabel&gt;
          &lt;/Form.Row&gt;
          &lt;Form.Row&gt;
            &lt;InputLabel label="Text Input" &gt;
              &lt;TextInput name="text-input" placeholder="Text Input" /&gt;
            &lt;/InputLabel&gt;
          &lt;/Form.Row&gt;
        &lt;/Form.Column&gt;
        &lt;Form.Row&gt;
          &lt;InputLabel label="Text Input" &gt;
            &lt;TextInput name="text-input" placeholder="Text Input" /&gt;
            &lt;TextInput name="text-input" placeholder="Text Input" /&gt;
            &lt;TextInput name="text-input" placeholder="Text Input" /&gt;
          &lt;/InputLabel&gt;
        &lt;/Form.Row&gt;
        &lt;Form.Actions&gt;
          &lt;ButtonGroup&gt;
            &lt;Button type="text"&gt;Cancel&lt;/Button&gt;
            &lt;Button type="success"&gt;Save&lt;/Button&gt;
          &lt;/ButtonGroup&gt;
        &lt;/Form.Actions&gt;
      &lt;/Form&gt;
    </code>
  </pre>

  <h5 class="code-title">Without JSX</h5>
  <pre class="code">
    <code>
      React.render(
        React.createElement(Form.Column, props),
        {DOM element to append form column to}
      );
    </code>
  </pre>

  <h4 class="code-title">Props</h4>

  <pre class="code">
    <code>
      {
        children : [...]  //form column is best used with form
      }
    </code>
  </pre>

  <h4>Form - Actions</h4>

  <div id="form-actions-pattern"></div>
  <script type="text/javascript">
    (function() {
      var props = {
        children : [buildFormActions()]
      };

      inflComp.React.render(
        inflComp.React.createElement(inflComp.Form, props),
        document.getElementById("form-actions-pattern")
      );
    })();
  </script>

  <h4 class="code-title">Code</h4>

  <h5 class="code-title">JSX</h5>
  <pre class="code">
    <code>
      &lt;Form&gt;
        &lt;Form.Actions&gt;
          &lt;ButtonGroup&gt;
            &lt;Button type="text"&gt;Cancel&lt;/Button&gt;
            &lt;Button type="success"&gt;Save&lt;/Button&gt;
          &lt;/ButtonGroup&gt;
        &lt;/Form.Actions&gt;
      &lt;/Form&gt;
    </code>
  </pre>

  <h5 class="code-title">Without JSX</h5>
  <pre class="code">
    <code>
      React.render(
        React.createElement(Form.Actions, props),
        {DOM element to append form actions to}
      );
    </code>
  </pre>

  <h4 class="code-title">Props</h4>

  <pre class="code">
    <code>
      {
        children : [...]  // will handle and style button and .button
      }
    </code>
  </pre>

  <h4>Form - Title</h4>

  <p>Form Title comes with optional actions and description.  Actions placed in the title should be used in place of Form.Actions</p>

  <div id="form-title-pattern"></div>
  <script type="text/javascript">
    (function() {
      var props = {
        children : [buildFormTitle()]
      };

      inflComp.React.render(
        inflComp.React.createElement(inflComp.Form, props),
        document.getElementById("form-title-pattern")
      );
    })();
  </script>

  <h4 class="code-title">Code</h4>

  <h5 class="code-title">JSX</h5>
  <pre class="code">
    <code>
      &lt;Form&gt;
        &lt;Form.Title title="My Form Title" actions={form_title_actions}&gt;
          &lt;p&gt;This is my form title description&lt;/p&gt;
        &lt;/Form.Title&gt;
      &lt;/Form&gt;
    </code>
  </pre>

  <h5 class="code-title">Without JSX</h5>
  <pre class="code">
    <code>
      React.render(
        React.createElement(Form.Title, props),
        {DOM element to append form title to}
      );
    </code>
  </pre>

  <h4 class="code-title">Props</h4>

  <pre class="code">
    <code>
      {
        title : string,          // title of the form
        actions : Form.Actions,  // optional actions for the form used in place of Form.Actions
        children: [...]          // array of React Elements, HTML, etc.
      }
    </code>
  </pre>

  <h4>Form - Section</h4>

  <p>Form Section defines a section of a large form.  It helps with spacing and dividing the form.</p>

  <div id="form-section-pattern"></div>
  <script type="text/javascript">
    (function() {
      var props = {
        children : [buildFormSection()]
      };

      inflComp.React.render(
        inflComp.React.createElement(inflComp.Form, props),
        document.getElementById("form-section-pattern")
      );
    })();
  </script>

  <h4 class="code-title">Code</h4>

  <h5 class="code-title">JSX</h5>
  <pre class="code">
    <code>
      &lt;Form&gt;
        &lt;Form.Section&gt;
          &lt;Form.SectionTitle title="My Form Section Title" action={form_title_action}&gt;
            &lt;p&gt;This is my form section title description&lt;/p&gt;
          &lt;/Form.SectionTitle&gt;
          .
          .
          .
        &lt;/Form.Section&gt;
      &lt;/Form&gt;
    </code>
  </pre>

  <h5 class="code-title">Without JSX</h5>
  <pre class="code">
    <code>
      React.render(
        React.createElement(Form.Section, props),
        {DOM element to append form section to}
      );
    </code>
  </pre>

  <h4 class="code-title">Props</h4>

  <pre class="code">
    <code>
      {
        hideDivider : boolean // hides the divider for the section.  defaults to false.
      }
    </code>
  </pre>

  <h4>Form - Section Title</h4>

  <p>Form Section Title is to be used with Form Section and comes with optional action and description.  The action is limited to an instance of ToggleSwitch</p>

  <div id="form-section-title-pattern"></div>
  <script type="text/javascript">
    (function() {
      var props = {
        children : [buildFormSectionTitle()]
      };

      inflComp.React.render(
        inflComp.React.createElement(inflComp.Form, props),
        document.getElementById("form-section-title-pattern")
      );
    })();
  </script>

  <h4 class="code-title">Code</h4>

  <h5 class="code-title">JSX</h5>
  <pre class="code">
    <code>
      &lt;Form&gt;
        &lt;Form.Section&gt;
          &lt;Form.SectionTitle title="My Form Section Title"&gt;
            &lt;p&gt;This is my form section title description&lt;/p&gt;
          &lt;/Form.SectionTitle&gt;
        &lt;/Form.Section&gt;
      &lt;/Form&gt;
    </code>
  </pre>

  <h5 class="code-title">Without JSX</h5>
  <pre class="code">
    <code>
      React.render(
        React.createElement(Form.SectionTitle, props),
        {DOM element to append form section title to}
      );
    </code>
  </pre>

  <h4 class="code-title">Props</h4>

  <pre class="code">
    <code>
      {
        title : string,          // title of the form section
        children: [...]          // array of React Elements, HTML, etc.
      }
    </code>
  </pre>

  <h4>Form - Alert</h4>

  <p>Form Alert is a wrapper for Alert.  It helps with spacing and styling</p>

  <div id="form-alert-pattern"></div>
  <script type="text/javascript">
    (function() {
      var props = {
        children : [buildFormAlert()]
      };

      inflComp.React.render(
        inflComp.React.createElement(inflComp.Form, props),
        document.getElementById("form-alert-pattern")
      );
    })();
  </script>

  <h4 class="code-title">Code</h4>

  <h5 class="code-title">JSX</h5>
  <pre class="code">
    <code>
      &lt;Form&gt;
        &lt;Form.Alert&gt;
          &lt;Alert title="All fields are required" type="error" showIcon={true} /&gt;
        &lt;/Form.Alert&gt;
      &lt;/Form&gt;
    </code>
  </pre>

  <h5 class="code-title">Without JSX</h5>
  <pre class="code">
    <code>
      React.render(
        React.createElement(Form.Alert, props),
        {DOM element to append form alert to}
      );
    </code>
  </pre>

  <h4 class="code-title">Props</h4>

  <pre class="code">
    <code>
      {
        children: [...]          // array of React Elements, HTML, etc.
      }
    </code>
  </pre>
</section>
